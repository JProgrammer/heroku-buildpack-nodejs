#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
$BP_DIR/compile-extensions/bin/check_stack_support

mkdir -p "$BUILD_DIR/.heroku/node/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

### Oracle Stuff
mkdir -p "$BUILD_DIR/.oracle/"
curl https://www.dropbox.com/s/ro5rfqwgtjdo75b/oracle-instantclient-full-12.1-linux.x64.tar.gz -L -s -o - | tar -xvz -C $BUILD_DIR/.oracle/ -f - 
export OCI_LIB_DIR=$BUILD_DIR/.oracle/
export OCI_INC_DIR=$BUILD_DIR/.oracle/sdk/include

header "Create Oracle profile.d script"
`mkdir -p #{BUILD_DIR}/.profile.d`

open("#{BUILD_DIR}/.profile.d/oracle.sh", "w") do |f|
  ORACLE_HOME = "/app/#{ORACLE_INSTANT_CLIENT_DIR}"
  f.puts "export ORACLE_HOME=#{ORACLE_HOME}"
  f.puts "export LD_LIBRARY_PATH=#{ORACLE_HOME}:$LD_LIBRARY_PATH"
  f.puts "export PATH=#{ORACLE_HOME}:$PATH"
  f.puts "export TNS_ADMIN=#{ORACLE_HOME}/network/admin"
  f.puts "export OCI_LIB_DIR=#{ORACLE_HOME}"
  f.puts "export OCI_INC_DIR=#{ORACLE_HOME}/sdk/include"
end

header "Save Oracle build LD_LIBRARY_PATH to ENV_DIR"

if ENV_DIR
  LD_LIBRARY_PATH_FILE = File.join(ENV_DIR, 'LD_LIBRARY_PATH')
  existing_ld_library_path = `cat #{LD_LIBRARY_PATH_FILE}`  if File.exists?(LD_LIBRARY_PATH_FILE)

  open(File.join(ENV_DIR,'LD_LIBRARY_PATH'), 'w') do |f|
    value = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
    unless existing_ld_library_path.nil? || existing_ld_library_path.trim.empty?
      value += ":#{existing_ld_library_path}"
    end
    f.puts value
  end
end


# CF Common
export BUILDPACK_PATH=$BP_DIR
source $BP_DIR/compile-extensions/lib/common
# END CF Common

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | indent
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment"
create_env # can't indent the whole thing because piping causes subshells; no exporting possible
list_node_config | indent

install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
  else
    warn_node_engine "$node_engine"
    install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  fi
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  warn_old_npm
}

header "Installing binaries"
install_bins | indent

restore_cache() {
  local cache_status=$(get_cache_status)

  if [ "$cache_status" == "disabled" ]; then
    echo "Skipping (cache disabled)"
  elif [ "$cache_status" == "invalidated" ]; then
    echo "Skipping (cache invalidated)"
  else
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "Loading 1 from cacheDirectories (default):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
    else
      echo "Loading $(echo $cache_directories | wc -w | xargs) from cacheDirectories (package.json):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
    fi
  fi
}

header "Restoring cache"
restore_cache | indent

build_dependencies() {
  if $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    rebuild_node_modules "$BUILD_DIR"
  else
    install_node_modules "$BUILD_DIR"
  fi
}

header "Building dependencies"
build_dependencies | indent

cache_build() {
  local cache_directories=$(get_cache_directories)
  echo "Clearing previous node cache"
  clear_cache
  if [ "$cache_directories" == "" ]; then
    echo "Saving 1 cacheDirectories (default):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
  else
    echo "Saving $(echo $cache_directories | wc -w | xargs) cacheDirectories (package.json):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
  fi
}

header "Caching build"
cache_build | indent

summarize_build() {
  cd $BUILD_DIR
  (npm ls --depth=0 | tail -n +2 || true) 2>/dev/null
}

header "Build succeeded!"
summarize_build | indent
